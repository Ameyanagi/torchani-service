name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags:
      - 'v*'
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          uv pip install -e ".[dev]"
      
      - name: Run linting
        run: |
          source .venv/bin/activate
          ruff check app/
          mypy app/
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/ --cov=app --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push API image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          target: production
      
      - name: Build and push Celery image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}-celery
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          target: celery

  update-manifests:
    name: Update Kubernetes Manifests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout ArgoCD manifests repo
        uses: actions/checkout@v4
        with:
          repository: Ameyanagi/k8s-manifests
          token: ${{ secrets.ARGOCD_GITHUB_TOKEN }}
          path: k8s-manifests
      
      - name: Update image tags
        run: |
          cd k8s-manifests/apps/torchani-service
          
          # Extract the image tag from the build job
          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          IMAGE_TAG=$(echo "$IMAGE_TAG" | head -n 1)
          
          # Update kustomization.yaml with new image
          cat > kustomization.yaml <<EOF
          apiVersion: kustomize.config.k8s.io/v1beta1
          kind: Kustomization
          
          resources:
            - ../../base/torchani-service
          
          images:
            - name: torchani-service
              newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
              newTag: ${IMAGE_TAG##*:}
            - name: torchani-service-celery
              newName: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
              newTag: ${IMAGE_TAG##*:}-celery
          
          patches:
            - target:
                kind: Deployment
                name: torchani-api
              patch: |-
                - op: replace
                  path: /spec/replicas
                  value: 2
          EOF
      
      - name: Commit and push changes
        run: |
          cd k8s-manifests
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git diff --staged --quiet || git commit -m "Update torchani-service image to ${IMAGE_TAG##*:}"
          git push

  deploy:
    name: Trigger ArgoCD Sync
    runs-on: ubuntu-latest
    needs: update-manifests
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Trigger ArgoCD sync
        run: |
          curl -X POST https://argocd.example.com/api/v1/applications/torchani-service/sync \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "revision": "main",
              "prune": false,
              "dryRun": false,
              "strategy": {
                "hook": {
                  "force": false
                }
              }
            }'